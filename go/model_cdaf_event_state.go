/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// CdafEventState - Represents the state of a subscribed event
type CdafEventState struct {

	Active bool `json:"active"`

	RemainReports int32 `json:"remainReports,omitempty"`

	// indicating a time in seconds.
	RemainDuration int32 `json:"remainDuration,omitempty"`
}

// AssertCdafEventStateRequired checks if the required fields are not zero-ed
func AssertCdafEventStateRequired(obj CdafEventState) error {
	elements := map[string]interface{}{
		"active": obj.Active,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseCdafEventStateRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CdafEventState (e.g. [][]CdafEventState), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCdafEventStateRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCdafEventState, ok := obj.(CdafEventState)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCdafEventStateRequired(aCdafEventState)
	})
}
