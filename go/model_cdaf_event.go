/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// CdafEvent - Describes an event to be subscribed
type CdafEvent struct {

	Type CdafEventType `json:"type"`

	MaxReports int32 `json:"maxReports,omitempty"`

	// indicating a time in seconds.
	MaxResponseTime int32 `json:"maxResponseTime,omitempty"`

	// indicating a time in seconds.
	MinInterval int32 `json:"minInterval,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	NextReport time.Time `json:"nextReport,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	NextPeriodicReportTime time.Time `json:"nextPeriodicReportTime,omitempty"`
}

// AssertCdafEventRequired checks if the required fields are not zero-ed
func AssertCdafEventRequired(obj CdafEvent) error {
	elements := map[string]interface{}{
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCdafEventTypeRequired(obj.Type); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCdafEventRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CdafEvent (e.g. [][]CdafEvent), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCdafEventRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCdafEvent, ok := obj.(CdafEvent)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCdafEventRequired(aCdafEvent)
	})
}
