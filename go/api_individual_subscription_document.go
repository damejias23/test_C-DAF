// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IndividualSubscriptionDocumentAPIController binds http requests to an api service and writes the service results to the http response
type IndividualSubscriptionDocumentAPIController struct {
	service IndividualSubscriptionDocumentAPIServicer
	errorHandler ErrorHandler
}

// IndividualSubscriptionDocumentAPIOption for how the controller is set up.
type IndividualSubscriptionDocumentAPIOption func(*IndividualSubscriptionDocumentAPIController)

// WithIndividualSubscriptionDocumentAPIErrorHandler inject ErrorHandler into controller
func WithIndividualSubscriptionDocumentAPIErrorHandler(h ErrorHandler) IndividualSubscriptionDocumentAPIOption {
	return func(c *IndividualSubscriptionDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewIndividualSubscriptionDocumentAPIController creates a default api controller
func NewIndividualSubscriptionDocumentAPIController(s IndividualSubscriptionDocumentAPIServicer, opts ...IndividualSubscriptionDocumentAPIOption) *IndividualSubscriptionDocumentAPIController {
	controller := &IndividualSubscriptionDocumentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IndividualSubscriptionDocumentAPIController
func (c *IndividualSubscriptionDocumentAPIController) Routes() Routes {
	return Routes{
		"DeleteSubscription": Route{
			strings.ToUpper("Delete"),
			"/ncdaf-evts/v1/subscriptions/{subscriptionId}",
			c.DeleteSubscription,
		},
		"ModifySubscription": Route{
			strings.ToUpper("Patch"),
			"/ncdaf-evts/v1/subscriptions/{subscriptionId}",
			c.ModifySubscription,
		},
	}
}

// DeleteSubscription - Ncdaf_EventExposure Unsubscribe service Operation
func (c *IndividualSubscriptionDocumentAPIController) DeleteSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	result, err := c.service.DeleteSubscription(r.Context(), subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifySubscription - Ncdaf_EventExposure Subscribe Modify service Operation
func (c *IndividualSubscriptionDocumentAPIController) ModifySubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	modifySubscriptionRequestParam := ModifySubscriptionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modifySubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModifySubscriptionRequestRequired(modifySubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModifySubscriptionRequestConstraints(modifySubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ModifySubscription(r.Context(), subscriptionIdParam, modifySubscriptionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
