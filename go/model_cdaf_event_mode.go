// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 */

package openapi


import (
	"time"
	"errors"
)



// CdafEventMode - Describes how the reports shall be generated by a subscribed event
type CdafEventMode struct {

	Trigger CdafEventTrigger `json:"trigger"`

	MaxReports int32 `json:"maxReports,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	Expiry time.Time `json:"expiry,omitempty"`

	// indicating a time in seconds.
	RepPeriod int32 `json:"repPeriod,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  
	SampRatio int32 `json:"sampRatio,omitempty"`

	PartitioningCriteria []PartitioningCriteria `json:"partitioningCriteria,omitempty"`

	NotifFlag NotificationFlag `json:"notifFlag,omitempty"`
}

// AssertCdafEventModeRequired checks if the required fields are not zero-ed
func AssertCdafEventModeRequired(obj CdafEventMode) error {
	elements := map[string]interface{}{
		"trigger": obj.Trigger,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCdafEventTriggerRequired(obj.Trigger); err != nil {
		return err
	}
	for _, el := range obj.PartitioningCriteria {
		if err := AssertPartitioningCriteriaRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNotificationFlagRequired(obj.NotifFlag); err != nil {
		return err
	}
	return nil
}

// AssertCdafEventModeConstraints checks if the values respects the defined constraints
func AssertCdafEventModeConstraints(obj CdafEventMode) error {
	if obj.SampRatio < 1 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.SampRatio > 100 {
		return &ParsingError{Param: "SampRatio", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
