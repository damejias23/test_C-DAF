// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// SubscriptionsCollectionCollectionAPIController binds http requests to an api service and writes the service results to the http response
type SubscriptionsCollectionCollectionAPIController struct {
	service SubscriptionsCollectionCollectionAPIServicer
	errorHandler ErrorHandler
}

// SubscriptionsCollectionCollectionAPIOption for how the controller is set up.
type SubscriptionsCollectionCollectionAPIOption func(*SubscriptionsCollectionCollectionAPIController)

// WithSubscriptionsCollectionCollectionAPIErrorHandler inject ErrorHandler into controller
func WithSubscriptionsCollectionCollectionAPIErrorHandler(h ErrorHandler) SubscriptionsCollectionCollectionAPIOption {
	return func(c *SubscriptionsCollectionCollectionAPIController) {
		c.errorHandler = h
	}
}

// NewSubscriptionsCollectionCollectionAPIController creates a default api controller
func NewSubscriptionsCollectionCollectionAPIController(s SubscriptionsCollectionCollectionAPIServicer, opts ...SubscriptionsCollectionCollectionAPIOption) *SubscriptionsCollectionCollectionAPIController {
	controller := &SubscriptionsCollectionCollectionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubscriptionsCollectionCollectionAPIController
func (c *SubscriptionsCollectionCollectionAPIController) Routes() Routes {
	return Routes{
		"CreateSubscription": Route{
			strings.ToUpper("Post"),
			"/ncdaf-evts/v1/subscriptions",
			c.CreateSubscription,
		},
	}
}

// CreateSubscription - Ncdaf_EventExposure Subscribe service Operation
func (c *SubscriptionsCollectionCollectionAPIController) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	cdafCreateEventSubscriptionParam := CdafCreateEventSubscription{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&cdafCreateEventSubscriptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCdafCreateEventSubscriptionRequired(cdafCreateEventSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCdafCreateEventSubscriptionConstraints(cdafCreateEventSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSubscription(r.Context(), cdafCreateEventSubscriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
