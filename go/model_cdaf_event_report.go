/*
 * Ncdaf_EventExposure
 *
 * CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// CdafEventReport - Represents a report triggered by a subscribed event type
type CdafEventReport struct {

	Type CdafEventType `json:"type"`

	State CdafEventState `json:"state"`

	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`

	// String providing an URI formatted according to RFC 3986.
	SubscriptionId string `json:"subscriptionId,omitempty"`

	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi,omitempty"`

	NumberOfUes int32 `json:"numberOfUes,omitempty"`
}

// AssertCdafEventReportRequired checks if the required fields are not zero-ed
func AssertCdafEventReportRequired(obj CdafEventReport) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"state": obj.State,
		"timeStamp": obj.TimeStamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCdafEventTypeRequired(obj.Type); err != nil {
		return err
	}
	if err := AssertCdafEventStateRequired(obj.State); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCdafEventReportRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CdafEventReport (e.g. [][]CdafEventReport), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCdafEventReportRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCdafEventReport, ok := obj.(CdafEventReport)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCdafEventReportRequired(aCdafEventReport)
	})
}
